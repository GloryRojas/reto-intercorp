{"version":3,"sources":["data/firebase.js","data/firestore.js","components/FormCrearCliente.jsx","views/Intro.jsx","components/ListaClientes.jsx","views/Usuarios.jsx","views/Calculos.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","FormCrearCliente","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","apellido","setApellido","_useState5","_useState6","edad","setEdad","_useState7","_useState8","nacimiento","setNacimiento","react_default","a","createElement","action","onSubmit","e","preventDefault","nombre","collection","add","id","sendUser","className","type","placeholder","onChange","currentTarget","value","Intro","Fragment","components_FormCrearCliente","ListaClientes","user","usuarios","setUsuarios","useEffect","get","then","forEach","doc","push","data","useFirebase","map","p","key","Usuarios","components_ListaClientes","Calculos","edades","parseInt","useFirebaseEdad","console","log","NavBar","react_router_dom","to","App","basename","process","components_NavBar","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.581d3523.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nfirebase.initializeApp({\r\n    apiKey: \"AIzaSyAaBDnvVd3AaHkoxVxu_Is0K9kC4M2-uMA\",\r\n    authDomain: \"reto-intercorp-9a9ca.firebaseapp.com\",\r\n    databaseURL: \"https://reto-intercorp-9a9ca.firebaseio.com\",\r\n    projectId: \"reto-intercorp-9a9ca\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"72946523998\",\r\n    appId: \"1:72946523998:web:8011eab71019e19e\"\r\n  });\r\n\r\nexport default firebase;\r\n","import firebase from './firebase';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport const useFirebase = () => {\r\n    const [usuarios, setUsuarios] = useState([]);\r\n    useEffect( () => { \r\n        db.collection('usuarios').get()\r\n            .then(e => {\r\n                const user = [];\r\n                e.forEach( doc => user.push(doc.data()));\r\n                setUsuarios(user);\r\n            });\r\n    }, [] );\r\n    return usuarios;\r\n}\r\n\r\nexport const useFirebaseEdad = () => {\r\n    const [edad, setEdad] = useState([]);\r\n    useEffect( () => { \r\n        db.collection('usuarios').get()\r\n            .then(e => {\r\n                const user = [];\r\n                e.forEach( doc => {\r\n                    user.push(parseInt(doc.data().edad))\r\n                });\r\n                setEdad(user);\r\n            });\r\n    }, [] );\r\n    return edad;\r\n}\r\n\r\nexport const sendUser = (nombre, apellido, nacimiento, edad) => {\r\n    return firebase.firestore().collection('usuarios').add({\r\n        nombre,\r\n        apellido,\r\n        nacimiento,\r\n        edad,\r\n        id: nacimiento+nombre\r\n    })\r\n}","import React, { useState } from 'react';\r\nimport { sendUser } from '../data/firestore';\r\nimport './formCrearCliente.scss';\r\n\r\nconst FormCrearCliente = () => {\r\n    const[name, setName] = useState('');\r\n    const[apellido, setApellido] = useState('');\r\n    const[edad, setEdad] = useState(0);\r\n    const[nacimiento, setNacimiento] = useState('');\r\n\r\n    return(\r\n        <form action=\"\" onSubmit={ (e) => {\r\n            e.preventDefault();\r\n            sendUser(name, apellido, nacimiento, edad);\r\n        }} className=\"crear-cliente\">\r\n            <p className=\"crear-cliente__p\">Ingrese nuevo usuario:</p>\r\n            <input type=\"text\" placeholder=\"Nombre\" onChange={ e => setName(e.currentTarget.value)} className=\"crear-cliente__input\"/>\r\n            <input type=\"text\" placeholder=\"Apellidos\" onChange={ e => setApellido(e.currentTarget.value)} className=\"crear-cliente__input\"/>\r\n            <input type=\"number\" placeholder=\"Edad\" onChange={ e => setEdad(e.currentTarget.value)} className=\"crear-cliente__input\"/>\r\n            <input type=\"date\" placeholder=\"Fecha de nacimiento\" onChange={ e => setNacimiento(e.currentTarget.value)} className=\"crear-cliente__input\"/>\r\n            <input type=\"submit\" className=\"crear-cliente__submit\"/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FormCrearCliente;","import React from 'react';\r\nimport FormCrearCliente from '../components/FormCrearCliente';\r\n\r\nconst Intro = () => {\r\n    return (\r\n        <>\r\n            <FormCrearCliente />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Intro;","import React from 'react';\r\nimport { useFirebase } from '../data/firestore';\r\nimport './listaclientes.scss';\r\n\r\nconst ListaClientes = () => {\r\n\r\n    const user = useFirebase();\r\n\r\n    return(\r\n        <div className=\"container lista-clientes\">        \r\n            <div className=\"row lista-clientes__cabecera\">\r\n                <span className=\"lista-clientes__cabecera--text col-2\">NOMBRE</span>\r\n                <span className=\"lista-clientes__cabecera--text col-3\">APELLIDO</span>\r\n                <span className=\"lista-clientes__cabecera--text col-2\">EDAD</span>\r\n                <span className=\"lista-clientes__cabecera--text col-3\">FECHA DE NACIMIENTO</span>\r\n            </div>\r\n            {\r\n                user.map( p => (\r\n                    <div className=\"row lista-clientes__user\" key={user.id}>\r\n                        <span className=\"lista-clientes__cabecera--text col-2\">{p.nombre}</span>\r\n                        <span className=\"lista-clientes__cabecera--text col-3\">{p.apellido}</span>\r\n                        <span className=\"lista-clientes__cabecera--text col-2\">{p.edad}</span>                        \r\n                        <span className=\"lista-clientes__cabecera--text col-2\">{p.nacimiento}</span>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListaClientes;","import React from 'react';\r\nimport ListaClientes from '../components/ListaClientes';\r\n\r\nconst Usuarios = () => {\r\n    return(\r\n        <ListaClientes />\r\n    )\r\n}\r\n\r\nexport default Usuarios;","import React from 'react';\r\nimport { useFirebaseEdad } from '../data/firestore';\r\n\r\nconst Calculos = () => {\r\n\r\n    const edades = useFirebaseEdad();\r\n\r\n    console.log(edades)\r\n\r\n    const promedio = (numeros) => {\r\n        const sumaTotal = numeros.reduce((ant, act) => ant + act)\r\n        return sumaTotal/numeros.length;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <p>El promedio de las edades es: <span></span></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculos;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './navbar.scss';\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <header className=\"header\">\r\n            <h1>INTERCORP RETAIL</h1>\r\n            <nav className=\"header__nav\">\r\n                <Link to=\"/\"><p className=\"header__nav--p\">Ingresar usuario</p></Link>\r\n                <Link to=\"/usuarios/\"><p className=\"header__nav--p\">Usuarios Registrados</p></Link>\r\n                <Link to=\"/calculos/\"><p className=\"header__nav--p\">Cálculos Usuarios</p></Link>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Intro from './views/Intro';\nimport Usuarios from './views/Usuarios';\nimport Calculos from './views/Calculos';\nimport NavBar from './components/NavBar';\n\nconst App = () => {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <NavBar />\n      <Route path=\"/\" exact component={Intro} />\n      <Route path=\"/usuarios/\" exact component={Usuarios} />\n      <Route path=\"/calculos/\" exact component={Calculos} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}